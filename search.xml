<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[协同过滤、LFM算法总结]]></title>
    <url>%2F2017%2F08%2F11%2Frecommend-alg%2F</url>
    <content type="text"><![CDATA[协同过滤算法分类及介绍一、基于用户协同过滤(User-based)用相似统计的方法得到具有相似爱好或者兴趣的相邻使用者，最早是在1994年由来自美国Minnesota大学Paul Resnick等人发表的《GroupLens: An Open Architecture for Collaborative Filtering of Netnews》一文中提出的。 1. 基本步骤（1）收集使用者资讯收集可以代表使用者兴趣的资讯。概括主要分为两类： 主动评分（显式评分）：基于用户的直接打分数据，如评分，喜爱等级，like/dislike 被动评分（隐式评分）：是根据使用者的行为模式由系统代替使用者完成评价，不需要使用者直接打分或输入评价资料，如电子商务中的购买记录，视频网站用户观看记录、收藏记录，甚至是评论文本观点意见挖掘等进行广泛深度的数据挖掘。 （2）最近邻搜索(Nearest neighbor search, NNS)以使用者为基础（User-based）的协同过滤的出发点是与使用者兴趣爱好相同的另一组使用者，就是计算两个使用者的相似度。 例如：寻找n个和A有相似兴趣使用者，把他们对M的评分作为A对M的评分预测。一般会根据资料的不同选择不同的算法。 PS: 目前较多使用的相似度算法： 皮尔森相关系数：Person Correlation Coefficient 余弦相似度：Cosine-based Similarity 修正余弦相似度：Adjusted Cosine Similarity （3）产生推荐结果有了最近邻集合，就可以对目标使用者的兴趣进行预测，产生推荐结果。依据推荐目的不同形式的推荐，较常见的推荐结果有Top-N 推荐和关联推荐。 Top-N 推荐：是针对个体使用者产生，对每个人产生不一样的结果，例如：透过对A使用者的最近邻使用者进行统计，选择出现频率高且在A使用者的评分项目中不存在的，作为推荐结果。 关联推荐：对最近邻使用者的记录进行关联规则(association rules)挖掘。 2. 优缺点优点：在数据集完善，内容丰富情况下，准确率较高，而且能够避开项目内容上的挖掘进行准确推荐，能够对项目关联性，用户偏好进行隐式透明的挖掘。 缺点：随着使用者数量的增多，计算的时间就会变长；新用户问题；数据稀疏性问题是导致效率与伸缩性上均不足 二、基于项目协同过滤（Item-based）鉴于基于用户的协同推荐算法随着使用者数量的增多，计算的时间就会变长，最早是在2001年由Sarwar提出了基于项目的协同过滤推荐算法《Item-based Collaborative Filtering Algorithms》中所提出的。 基于项目协同过滤在于透过计算项目之间的相似性来代替使用者之间的相似性。所建立的一个基本的假设：”能够引起使用者兴趣的项目，必定与其之前评分高的项目相似”。 1. 基本步骤：（1）收集使用者资讯同以使用者为基础（User-based）的协同过滤。 （2）针对项目的最近邻搜索先计算己评价项目和待预测项目的相似度，并以相似度作为权重，加权各已评价项目的分数，得到待预测项目的预测值。 例如：要对项目 A 和项目 B 进行相似性计算，要先找出同时对 A 和 B 打过分的组合，对这些组合进行相似度计算，常用的算法同基于使用者（User-based）的协同过滤。 （3）产生推荐结果在用户使用评价一个商品感兴趣后，会自动搜寻改商品相似度最大的前N项条目。 2. 优缺点：优点：以项目为基础的协同过滤不用考虑使用者间的差别，所以精度比较差。但是却不需要使用者的历史资料，或是进行使用者识别。对于项目来讲，它们之间的相似性要稳定很多，因此可以离线完成工作量最大的相似性计算步骤，从而降低了线上计算量，提高推荐效率，尤其是在使用者多于项目的情形下尤为显著。 缺点：但其仍有许多问题需要解决，最典型的有稀疏问题(Sparsity)和冷启动问题(Cold-start)，开始时效果较差。此外还有新使用者问题和算法健壮性等问题。 三、基于模型的协同过滤（Model- based）以使用者为基础（User-based）的协同过滤和以项目为基础（Item-based）的协同过滤统称为以记忆为基础（Memory based）的协同过滤技术，他们共有的缺点是资料稀疏，难以处理大数据量下的即时结果，因此发展出以模型为基础的协同过滤技术。 以模型为基础的协同过滤(Model-based Collaborative Filtering)是先用历史资料得到一个模型，再用此模型进行预测。以模型为基础的协同过滤广泛使用的技术包括Latent Semantic Indexing、Bayesian Networks…等，根据对一个样本的分析得到模型。 四、基于项目相似度与基于用户相似度的差异基于用户相似度与基于项目相似度计算的一个基本的区别是，基于用户相似度是基于评分矩阵中的行向量相似度求解，基于项目相似度计算式基于评分矩阵中列向量相似度求解，所以各种相似度计算方法在基于用户相似度与基于项目相似度计算中均适用。 例如： 基于项目相似度计算式计算如Item3，Item4两列向量相似度； 基于用户相似度计算式计算如User3，User4量行向量相似度。 最终的计算公式方法均相同。具体可参考《Toward the next generation of recommender systems: A survey of the state-of-the-art and possible extensions》2.2节 五、相似度计算不足与改进基于评分矩阵相似度计算所面临的一个性能问题，数据稀疏下，精度很差，因为相似度计算是基于寻找拥有共同用户评分的项目或者共同项目评分的用户，在数据稀疏下，两个向量中空值过多，导致计算共同评分维度过低，甚至就没有共同评分。 对于数据稀疏性这种情况下，一个尝试的途径是进行对评分矩阵进行填充。 填充规则有很多，一种通用的方法是，填充均分，具体如下两种： 基于用户均分：填充对应用户的平均打分 基于项目均分：基于对应项目的平均打分 隐语义模型LFM算法介绍一、基本概念LFM(latent factor model)隐语义模型，这也是在推荐系统中应用相当普遍的一种模型。 需要解决的问题：(1)给物品分类 (2)确定用户兴趣属于哪些类及感兴趣程度 (3)对于用户感兴趣的类，如何推荐物品给用户 说到分类，很容易想到人工对物品进行分类，但是人工分类是一种很主观的事情，比如一部电影用户可能因为这是喜剧片去看了，但也可能因为他是周星驰主演的看了，也有可能因为这是一部属于西游类型的电影，不同的人可以得到不同的分类。 而且对于物品分类的粒度很难控制，究竟需要把物品细分到个程度，比如一本线性代数，可以分类到数学中，也可以分类到高等数学，甚至根据线性代数主要适用的领域再一次细分，但对于非专业领域的人来说，想要对这样的物品进行小粒度细分无疑是一件费力不讨好的事情。 而且一个物品属于某个类，但是这个物品相比其他物品，是否更加符合这个类呢？这也是很难人工确定的事情。 对于上述需要解决的问题，隐语义模型就派上用场了。隐语义模型，可以基于用户的行为自动进行聚类，并且这个类的数量，即粒度完全由可控。 对于某个物品是否属与一个类，完全由用户的行为确定，我们假设两个物品同时被许多用户喜欢，那么这两个物品就有很大的几率属于同一个类。而某个物品在类所占的权重，也完全可以由计算得出。 具体公式参见：http://blog.csdn.net/sinat_33741547/article/details/52976391 推荐判定指标：1.平均绝对误差 MAE（Mean Absolute Error）2.准确率与召回率（Precision &amp; Recall）*(下文中，准确率与Precision；召回率与Recall同义，可互换) 准确率和召回率是广泛用于信息检索和统计学分类领域的两个度量值，用来评价结果的质量。其中精度是检索出相关文档数与检索出的文档总数的比率，衡量的是检索系统的查准率；召回率是指检索出的相关文档数和文档库中所有的相关文档数的比率，衡量的是检索系统的查全率。 一般来说，Precision就是检索出来的条目（比如：文档、网页等）有多少是准确的，Recall就是所有准确的条目有多少被检索出来了。 正确率、召回率是评价推荐系统性能的重要指标。定义如下： 正确率 = 提取出的正确信息条数 / 提取出的信息条数 召回率 = 提取出的正确信息条数 / 样本中的信息条数 (两者取值在0和1之间，数值越接近1，查准率或查全率就越高) 由此可见，正确率是评估捕获的成果中目标成果所占得比例；召回率，顾名思义，就是从关注领域中，召回目标类别的比例； 但是在一些情况下，单独考虑Precision与Recall，在判断上会出现矛盾。我们希望推荐结果的Precision越高越好，同时Recall也越高越好，但事实上这两者在某些情况下有矛盾的。比如极端情况下，我们只搜索出了一个结果，且是准确的，那么Precision就是100%，但是Recall就很低；而如果我们把所有结果都返回，那么比如Recall是100%，但是Precision就会很低。因此在不同的场合中需要自己判断希望Precision比较高或是Recall比较高。如果是做实验研究，可以绘制Precision-Recall曲线来帮助分析。 3.综合评价指标（F-Measure）*(下文中，F-measure,F-score,F值同义，可互换) Precision和Recall指标有时候会出现的矛盾的情况，这样就需要综合考虑他们，最常见的方法就是F-Measure（又称为F-Score）。 F-Measure是Precision和Recall加权调和平均： F值= 正确率 召回率 2 / (正确率 + 召回率) 综合Precision和Recall的结果，当F较高时则能说明试验方法比较有效。 准确率、召回率、F值计算方法详情参见：http://bookshadow.com/weblog/2014/06/10/precision-recall-f-measure/ 4.覆盖率&amp;新颖度覆盖率：反应推荐系统发掘长尾的能力，覆盖率越高推荐给用户的item越丰富。所有给用户推荐过的物品集合占所有物品的比例 新颖度：推荐结果物品很热门说明新颖度较低，否则说明比较新颖]]></content>
      <categories>
        <category>推荐系统</category>
      </categories>
      <tags>
        <tag>recommend</tag>
        <tag>algorithm</tag>
        <tag>lfm</tag>
        <tag>Collaborative-Filtering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《未来已来》阅读感悟系列]]></title>
    <url>%2F2017%2F08%2F10%2Freading-thoughts-1%2F</url>
    <content type="text"><![CDATA[——对“信任”、“中国经济”和“个性化”的一些感想信任 原文： “今天的中国，正在拥有信任。每天2400万笔淘宝交易，意味着在中国，每天有2400万个信任关系在流转。你居然会付钱给一个从未听说过名字的陌生人，买一个你可能从来没见过的东西，再让它经过上百上千公里，通过一个你不认识的人，送到你手上。” 感想：谈到信任，我的想法很复杂。一方面觉得现实很残酷，但同时又保持着谨慎的乐观，相信未来会更好。 在北京这样的大城市读书，让我有机会接触到更多的机遇，比如课余时间可以更方便的找到兼职。但是，身边也有不少通过不正规的第三方平台找兼职被骗的人。这些平台，利用大学生刚来到这个陌生的城市，人生地不熟，而且大都社会生活经验不足，简单设个局就可以把钱骗到手。李文星事件则属于一个极端。那么我们到底该不该相信第三方平台？作为正规平台，他们是不是能做到对平台内容的严格监管？不正规平台层出不穷，我们能否相信监管机构？ 一连串的问号，就是我对如今中国社会“信任”体系的态度。 回到阿里巴巴的问题，毫无疑问它们对社会信任体系的建设起到了重要作用，但是交易平台假货问题层出不穷也是被众人诟病的地方。因为经济利益在刺激商业行为，我们没有办法完全杜绝这类不合规、甚至不合法的消耗社会信任感的行为出现。但是正如原文谈到的，中国正在逐步拥有信任。像网络购物这种过程复杂，需要建立在信任基础上的生活服务越来越被人们接受，就是这一趋势的直观体现。 中国在快速发展，国内民众的文化素质也越来越高。社会文明程度必然会越来越高。虽然我们离“夜不闭户、路不拾遗”还很远，但是事情总会变得更好，对此我十分坚信。 但是我还听过一句话：“如今最有头脑的人都在想怎么炒股赚钱，而没有去做点实事”，我就在想，如果头脑聪明、素质高的人去想怎么坑人赚钱…… 变化 原文： “在很多人还没搞清楚什么是PC、什么是互联网的时候，移动互联网来了；当很多人还没搞清楚移动互联网的时候，大数据时代又来了。” 感想：我们非常高兴的看到，人类的科技水平一直都在进步，但是如今的进步速度与第一、第二次工业革命相比，简直就是动车与牛车的差距。从互联网到移动互联网，从IT到DT，变化一直都在悄悄地、迅速地进行。在这样一个快速发展的时代，想要不落伍，就得不断地学习，不断地更新自己的观念。 作为一名90后，我赶上的互联网给生活带来翻天覆地变化的时期。我们看着网速变快再变快，我们开始在网上购物，我们开始使用微信聊天，我们开始用支付宝付款。因为年轻，我们学东西很快，很容易接受，我们对微信，支付宝，网络购物的理解，要比我们父母那一辈人更透彻。但是，当在这些应用和服务刚出现的时候，我们或多或少有过些许怀疑。社会发展的浪潮迫使我们去接受了这些变化。 再看看那些五六岁就开始打王者荣耀的小孩们，（笑……）当然这是一个玩笑，但是，00后、10后们从出生开始就沉浸在互联网的模式下，他们不需要转变，他们只需要接受。他们对互联网的理解，要比我们更深刻。 再过几年，我们这一代人就要到社会上去闯荡了。保持一个开放的态度，不断学习、不断更新和改变我们的观念，是我们必须做的事。否则，当别人已经开始时空穿梭的时候，我们还坐在高铁上思考，什么是时空穿梭？究竟为什么要时空穿梭？ 中国消费潜力 原文： “美国人对中国经济的认识，除了有一些误区，还有一点，是中美之间存在着文化差异。美国人认为中国经济有下行压力，中国人就不消费了。但事实并非如此。阿里巴巴平台的消费者数据显示：2015年以来，中国的消费信心依然强劲，上升趋势明显，在投资和出口放缓的大背景下，内需消费不减反增。这是美国人无法理解的。美国人善于花明天的钱，花别人的钱，而中国人的危机意识是历史文化造成的，我们总是在花昨天的钱，花自己存下来的钱。中国人喜欢存钱，中国是世界上居民储蓄率最高的国家，中国的老百姓存钱，是为了在困难的时候救急。因此，你会发现：经济困难的时候，中国人仍然有钱花。” 感想：美国人花明天的钱，花别人的钱；中国人花昨天的钱，花自己的钱。中国是一个人口大国。我们永远都不缺消费者，不缺消费潜力，我们缺的是消费动力。如今中国有三亿中产阶层，他们的消费需求让中国在经济增长率放缓的情况下，国内经济依然保持繁荣。想一想2008年金融危机的时候，政府曾号召“扩大内需”，以此来减少外部贸易额骤减对中国本土长期依赖出口的企业带来的冲击，在“家电下乡”之类的政策引导下，中国民众有了消费动力，由此支撑中国经济走过了一个艰难的时期。 中国一直都不缺消费者，如果能让中国这14亿人中更多人富起来，比如让中产阶层达到5亿，那么中国的国内消费需求将不可限量。想想美国加起来也不过3亿人，但是他们贡献了全球消费需求的很大一部分。 中国消费人群主力军的大旗正在被交到经历了互联网浪潮的一代人手中，他们的消费观念已经不再传统，他们比以前更能接受超前消费这个概念。如今网上购物，支付宝、京东都提供小额的借贷服务，这种服务让超前消费逐渐被更多人所接受。 中国在发展，每过一年，人们的生活水平都在提高，富起来的人更多，消费观念更开放，那么未来的某一天，中国的消费能力会不会让世界惊艳？ 团队 原文： “梦想和理想的差异在哪里？想当飞行员、当老板、当教授，这叫梦想。理想是什么？是有一个团队，有一帮人共同理解、相互支持来成就一件事情，理想是要变成现实的。” 感想：直到今天，我最大的遗憾就是没能加入一个优秀的团队。这是我一直以来的都在追寻的东西。对于不太擅长交际的我来说，在大学里找到一帮志同道合的同伴太难了。理想是有的，但是现实总是那么残酷。我曾经羡慕那些就算不拿工资、甚至辍学都要为马斯克的公司干活的名牌大学学生，我羡慕他们的执行能力，羡慕他们追寻梦想的勇气。 个性化 原文： “有个大学生在淘宝上卖夏天蚊子的标本，还卖得很好。他说夏天复习功课的时候，蚊子咬他，他就把蚊子抓来做成标本，给女孩子做耳环，结果就有人要两只一模一样的蚊子……” 感想：这听起来像是一个笑话，但这是必然。来到数据时代，大公司获取了巨量数据，然后干什么？公司是靠向客户提供产品和服务来赚钱的。那么随着社会的发展，随着技术的进步，随着个性化越来越成为关键词，消费者将不再满足于千篇一律的产品。 如今同一款汽车可以卖出几百万辆，但是在未来，因为每一个人的需求不同，甚至有可能你的汽车是针对你一个人设计的。这想想就很酷，对吗？我们不再需要根据自己的需求去选汽车，而是直接告诉汽车厂商，我要一辆汽车，它必须满足我的balabala……这么多要求，然后汽车厂商告诉你，没问题，明天给您专属于您的个性化汽车设计方案。 这种商业模式的转变，现在不可能，那我们就看看未来吧。]]></content>
      <categories>
        <category>阅读感悟</category>
      </categories>
      <tags>
        <tag>alibaba</tag>
        <tag>reading</tag>
        <tag>thoughts</tag>
        <tag>future</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于马云和马斯克的一点感想]]></title>
    <url>%2F2017%2F08%2F09%2Fmayun-musk%2F</url>
    <content type="text"><![CDATA[概述最近读了几本关于马云和马斯克（Elon · Musk）的书，越发觉得这两个人的各种精神品质，思想觉悟让我不得不佩服。这两个人从事的是截然不同的行业。但是他们的思想却有着极大的共同点：着眼未来。 马云从1999年到今天，马云的阿里巴巴已经从传统电商做到了无处不在的现代化商务，业务包括核心电商、云计算、数字媒体和娱乐以及创新项目和其他业务。阿里巴巴的布局一直以来都超前别人5-10年，没有人能看懂阿里巴巴究竟要做什么，甚至阿里自己人都不清楚阿里巴巴究竟是一家什么企业。马云承诺，到阿里20周年时，会让世界看清楚阿里究竟是什么企业。 在我看来，阿里是一个面向未来的企业。是一个敢于承担社会责任的企业。阿里的一句话：“lf not me who,lf not now when”，让我印象深刻。 电子商务从互联网刚进入中国，网速渣的可怕的时候，阿里巴巴就开始尝试在网上进行商品买卖。这种交易方式的变化在当时可以说是违反三观的。所有人都怀疑他们脑子有病，连互联网是什么都没搞清楚，还想在网上买卖东西？ 事实证明，阿里巴巴改变了中国的交易模式。如今，通过网络购物是一件再普通不过的事。我对阿里巴巴创始人的脑洞表示佩服。在互联网还是雏形的时候，他们看到了互联网的潜力，并且敢于开拓，敢于向人们眼中的不可能发起挑战。 要知道，改变人们固有的观念，比登天还难。就好比让古人接受地球是圆的一样。 金融在金融方面，阿里巴巴同样也迫使社会做出了改变。支付宝的金融产品“余额宝”相信大家都非常熟悉。在这个产品之前，几乎无风险的存款利率一直牢牢把控在银行手中。直到今天，尽管相关监管部门的介入让余额宝收益率有所降低，但仍然可以达到银行同期利率的两三倍。 支付宝扫码支付，让人们的生活方便了不少。现在随便一个小县城，出门不带现金都可以解决一切需求。当然，微信在这方面也贡献不少。他们改变了人们长久以来习惯的支付方式，现在划卡消费已经不那么热门了。 物流阿里巴巴一直都在下一盘大棋。他们不自建物流，但是他们协助物流管理。之所以这样做，一方面是阿里巴巴要把员工数控制在5万，方便管理。另一方面是阿里一直以来都是做平台，他们要把更多的就业机会和岗位留给其他人。于是，没有了阿里这个巨无霸的垄断，中国的土地上诞生了众多物流公司，竞争充分，发展迅速。 阿里的目标是利用DT技术，基于大数据，自动化等，建设发达的现代化仓储。虽然这个概念炒了很久了，但是我可以感觉到，这一天很快就会来到。 云计算为了参加学校里的一个项目，我使用了阿里云提供的服务器产品。他们同时还提供云数据库、云计算等。可以看出，阿里还是在做平台。这个平台可以让更多的中国企业加入到DT时代的竞争和发展中。为了迎接数据时代的到来，阿里云提前很多年就开始默默布局，建设基础设施。 总结阿里的每一个重大战略，几乎都是面向未来的。想别人不敢想的事，做别人不敢做的事。而且阿里的理念是服务中小企业，它希望富起来的人越来越多，在这个过程中，成就了别人，自己当然也少不了收益。而且实现了共赢。 就这一点，京东是比不了的。京东自建物流，送货确实是快。但是，它成为了快递行业的强力竞争者，他靠自己的资本，抢去了那些资金实力不够雄厚的中小企业的机会。当然不是说他的出发点有问题，在如今这个时代，为大众提供更好的服务无可厚非。京东在为自己做事，阿里在为中小企业做事。这种社会责任感的不同，注定了京东只是一个小公司，而阿里成为全球化的大公司。 最近我们看到，马云在推动全球电子贸易平台的建立。WTO已经不再适应时代的发展，政府间的商业谈判，远远没有商人之间的商业谈判来的更有效率。在如今，各国通过贸易壁垒来保护本国企业是众所周知的事，如果不是阿里，那又会是谁来推动真正意义上的全球自由贸易的建立？ 阿里一直都在着眼未来。这是我佩服这个企业的原因，他们永远在做当时人们都不理解又困难重重的事。等到他们做成了，人们的生活方式会发生翻天覆地的变化。就好像5年前，很难想象如今方便的扫码支付；10年前，人们还是对网络购物持怀疑态度。 我个人期待着这家极具创新精神，开拓精神，有强烈社会责任感的中国，不！是全球化企业能够走的更远。102年远远不够。 马斯克大概几年前，我就开始关注马斯克。让我感触最深的就是这个人近乎偏执的执着。他为了实现小时候的理想，几十年如一日地在奋斗。别人的不理解，和前进路上的重重困难都不能阻止他前进的脚步。 互联网、太空探索、新能源。互联网领域的成就在他创业初期就已经实现。剩下两个领域的梦想如今正寄托在他的三家公司身上。 特斯拉（Tesla）所有人都觉得电动汽车没有发展、技术受限、成本太高……但是马斯克就是一个想法，再困难，我要去实现它。买零件太贵，自己造，买软件太贵，自己写……苦了给他干活的人。他自带无节制加班工作属性，所以下面的员工也都任劳任怨。而且他的个人魅力，和他的宏伟理想让他的公司可以持续招到名牌大学的顶尖学生。所以，公司超高的工作压力虽然让众多刚进入职场的小年轻们没有办法坚持太长时间，但是人才空缺总是会被及时补充。 SPACE X过去我们都认为，航天工业是属于国家或者军工巨头的领域。私人航天在几年前还是一个难以想象的虚幻景象，更何况廉价私人航天。马斯克把自己在火箭和汽车领域的经验互相借鉴，自己动手丰衣足食的理念渗透到了企业的骨髓里。受不了供应商的拖延导致自己的计划延期，连火箭的零件他都要自己做。他提出的火箭利用自己的动力回收再利用的想法，也是众多研究者向往过，但从没有投入实践过的想法。 记得很多年前，我就有这么一个疑惑，为什么发射的火箭不能回收再利用。我习惯性的想，研究人员一定做过充分的研究，证明这样做要么技术上不可行，要么经济上不可行。于是我就再也没有这个问题了。因为我相信研究人员都是非常专业，非常牛的。 马斯克让我认识到，我的想法有多么愚蠢。之前没有这么干，并不意味着不能这么干。科技永远没有达到顶峰的那一天，总有可以进一步发展的方向。马斯克的坚持带来了廉价航空的新时代。更把人类移民火星的梦想一步一步拉近现实。 人们一直都有疑惑，为什么他要坚持移民火星、推进清洁能源城市建设、电动汽车这样的想法？他的回答让我印象深刻。他说：“因为我不想在未来某一天觉得未来如此让人沮丧。” SolarCity这个公司我没有更多的了解，只是知道，它同样颠覆了我的认知。太阳能屋顶，一直以来都因高昂的成本没有走进更多的家庭。SolarCity 可提供从系统设计、安装以及融资、施工监督等全面的太阳能服务。“Affordable solar products to power your world”是我在SolarCity的官网看到的一句话。他们的目标就是让太阳能设施的价格变得普通用户可以承受。 总结为什么之前没有人这么做？电动汽车的价格一直都没有达到普通人可以承受的水平；火箭发射的成本永远都是天文数字；太阳能一直都没有走进更多的普通家庭的生活…… 没错，电池技术限制了电动汽车的发展，太阳能技术的效率和成本没有发展到可以普遍推广的水平……这些的确是很重要的因素，但是更重要的是，大多数人开设的大多数公司都是为眼前的利益而战。没有人愿意投入太多精力和资本去一个近期没有收益可能，而且很有可能失败的领域。马斯克这样做了，他的特斯拉，他的SPACE X，他的太阳城，每一个企业都是为了一定的理想，而进入一个大多数人都不太看好的领域。遇到再大的困难他都以超人类的意志品质坚持了下来，并且最终，达到了今天的成就。 如今，马斯克已经是公认的硅谷领袖，他的理念已经被大多数人所接受，他的公司也得到了越来越多人的支持。Model 3在没有披露任何细节的情况下收到了几十万辆的订单，这是传统汽车制造公司望尘莫及的。正如马斯克所说，“特斯拉不需要做广告。” 我相信，在不远的将来，人类可以用清洁能源维持整个社会的高效运转，人类也可以实现那个登上遥远星球的梦想。这一切，都是因为有人在追梦。 这个人，是Elon · Musk ，更是在他影响下成长起来的一代又一代人。]]></content>
      <categories>
        <category>阅读感悟</category>
      </categories>
      <tags>
        <tag>musk</tag>
        <tag>alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[apache24_error]]></title>
    <url>%2F2017%2F08%2F09%2Fapache24-error%2F</url>
    <content type="text"><![CDATA[Apache24连接数据库莫名卡死解决办法情况概述基于django搭建的网站，Apache24执行网站请求时，利用Python库pymssql连接数据库查询，服务器莫名卡死，服务器莫名卡死，自己找BUG找了几天，终于发现卡死的位置是pymssql连接SQL Server 2012数据库执行查询的位置。大概是数据库响应超时？但是又没有任何反馈报错，apache24失效，无法处理网站请求。需要重启才能恢复。 让我不解的是，这种情况时偶发事件，多数情况可以正常执行，不知道什么时候就会卡死。在网上找了好多资料，没发现有用的。 自己想了一下，加一个装饰器，数据库超时未响应直接返归错误提示，这样服务器大概不会卡死失去服务能力。于是找到了下面这些代码，至于怎么加装饰器到自己的数据库连接程序上，后面会有详细的介绍。 网站配置信息是我自己的网站配置，大家可以参考一下。 超时报错装饰器代码Python代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107# -*- coding: utf-8 -*-#网站配置：# Python 2.7.10# django 1.8.16# Microsoft SQL Server 2012# AppServ 8.5.0（Apache24）# pymssql 2.1.0# author：Kevin Liu 测试有效import sysimport threadingimport timeclass KThread(threading.Thread): """A subclass of threading.Thread, with a kill() method. Come from: Kill a thread in Python: http://mail.python.org/pipermail/python-list/2004-May/260937.html """ def __init__(self, *args, **kwargs): threading.Thread.__init__(self, *args, **kwargs) self.killed = False def start(self): """Start the thread.""" self.__run_backup = self.run self.run = self.__run # Force the Thread to install our trace. threading.Thread.start(self) def __run(self): """Hacked run function, which installs the trace.""" sys.settrace(self.globaltrace) self.__run_backup() self.run = self.__run_backup def globaltrace(self, frame, why, arg): if why == 'call': return self.localtrace else: return None def localtrace(self, frame, why, arg): if self.killed: if why == 'line': raise SystemExit() return self.localtrace def kill(self): self.killed = Trueclass Timeout(Exception): """function run timeout""" def timeout(seconds): """超时装饰器，指定超时时间 若被装饰的方法在指定的时间内未返回，则抛出Timeout异常""" def timeout_decorator(func): """真正的装饰器""" def _new_func(oldfunc, result, oldfunc_args, oldfunc_kwargs): result.append(oldfunc(*oldfunc_args, **oldfunc_kwargs)) def _(*args, **kwargs): result = [] new_kwargs = &#123; # create new args for _new_func, because we want to get the func return val to result list 'oldfunc': func, 'result': result, 'oldfunc_args': args, 'oldfunc_kwargs': kwargs &#125; thd = KThread(target=_new_func, args=(), kwargs=new_kwargs) thd.start() thd.join(seconds alive = thd.isAlive() thd.kill() # kill the child thread if alive: raise Timeout(u'function run too long, timeout %d seconds.' % seconds) else: return result[0] _.__name__ = func.__name__ _.__doc__ = func.__doc__ return _ return timeout_decorator#*********************************************#测试功能用@timeout(5)def method_timeout(seconds, text): print 'start', seconds, text time.sleep(seconds) print 'finish', seconds, text return secondsif __name__ == '__main__': for sec in range(1, 10): try: print '*' * 20 method_timeout(sec, 'test waiting %d seconds' % sec) except Timeout, e: print e 不懂装饰器的使用的话，去看一下相关的介绍吧。 数据库文件代码Python代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# -*- coding: utf-8 -*-# author：Kevin Liu# 配置信息同上import pymssqlfrom online.timeout_deco import timeoutfrom online import user_passworddbo_user,dbo_password = user_password.get_user_password()class MSSQL: def __init__(self,host,user,pwd,db): self.host = host self.user = user self.pwd = pwd self.db = db # 这是我加装饰器的位置。每次执行数据库操作都会经过此位置 # 你也可以在调用的时候加，那样可以精确控制每个函数执行的超时时间阈值。 # 0.5代表0.5秒内没有返回查询结果，则抛出异常。 # 我没有具体测试卡住的位置是__GetConnect、ExecQuery还是ExecNonQuery，于是就都加了。 @timeout(0.5) def __GetConnect(self): if not self.db: raise(NameError,"没有设置数据库信息") self.conn = pymssql.connect(host=self.host,user=self.user,password=self.pwd,database=self.db,charset="utf8") cur = self.conn.cursor() if not cur: raise(NameError,"连接数据库失败") else: return cur @timeout(3) def ExecQuery(self,sql): cur = self.__GetConnect() cur.execute(sql) resList = cur.fetchall() self.conn.close() return resList @timeout(0.5) def ExecNonQuery(self,sql): cur = self.__GetConnect() cur.execute(sql) self.conn.commit() self.conn.close()#*************************************************************************def delete_bind_id(user_id): ms = MSSQL(host="localhost",user="%s"%dbo_user,pwd="%s"%dbo_password,db="xuanke") ms.ExecNonQuery("update user_info set bind_id =null,gra=null,maj=null,COL_RATING=null,spare_time=null where user_id = %d"%user_id) delete_spare_time(user_id)if __name__ == '__main__': # 如果按照上面设置以后，执行下面的语句时 # 会调用MSSQL类中的函数，所以都会受到@timeout(0.5)的约束 delete_bind_id(user_id) 测试效果使用了上面的超时装饰器@timeout()以后，如果查询结果及时返回，则Apache24继续执行请求内容。如果查询超时，则会抛出错误信息。1raise Timeout(u'function run too long, timeout %d seconds.' % seconds) 当项目settings 中debug = False时，Apache24处理超时信息时会显示SERVER ERROR页面，不会卡死。使用半个多月了，网站没有再发生过卡死现象。 希望这些可以帮到你。]]></content>
      <categories>
        <category>程序错误解决方案</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Apache24</tag>
        <tag>Pymssql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纪念：2016年12月6日勇士大胜步行者]]></title>
    <url>%2F2017%2F08%2F08%2Fcelebrate-12-6%2F</url>
    <content type="text"><![CDATA[一时也想不到一个可以概括我要写的内容的题目，何况到底要写什么到现在为止还只是一个大概的印象。总的来说，就是在看完比赛后，想把脑海中浮现的种种想法用文字写下来，纪念一下。 上次写关于勇士的文字还是总决赛G7赛后，虽然已经过去很久，但那一天的画面还是不时的浮现在眼前。可以说，那场决赛失利我会永远铭记。毕竟之前的一整个赛季，一个华丽的赛季，一个充满期待，挑战，惊喜的赛季，一个本该完美无瑕的赛季，随着最后时刻欧文的三分，蒙上了一层永远都无法褪去的阴霾。 我永远都无法想象，也不敢想象，那样的一个最接近完美的时刻，真的还可以再来一次吗？纵然世界总是充满惊喜，但我真的不奢望。 经历了一次总决赛的洗礼，经历了休赛期人员调整，勇士还是我喜欢的那支勇士。他们打球的风格没有改变，团队，信任，欢乐还是一如既往。当然，跟以前不同，现在有了杜兰特，一个神一样稳定的男人。 还记得得知阿杜决定加盟勇士的那一刻，我正在和舍友们从北门撸串回来的路上，当时的一切，同样历历在目。那时我的心里由衷的喜悦，我当时还说，“下一个赛季，联盟再也没有一个球队能阻挡勇士了！” 对于阿杜来勇士，网络上有支持的，当然也有讥讽叫骂的。我当然听说过詹皇抱大腿的传说，也知道，巨星的这种决定，必然有人支持，有人反对。作为勇士球迷，我的立场就不用说了。但有一点我想说，杜兰特的这个决定以及他面对随之而来的一切的态度，让我对他由衷的敬佩。追求自己想要的生活，享受篮球的快乐，而不是被道德胁迫，做自己不喜欢做的事，明明不开心，还要装作乐在其中。 对于这个赛季的其他人员调整，我也有一些看法。扎扎和博古特相比，我显然更喜欢博古特。就目前的比赛来看，扎扎只有在策应球上，符合我的期待。像什么防守，盖帽，速度……与之相比，我倒是挺喜欢麦基，虽然他智商有点捉急，但毕竟能跳啊！跳起来就是一个空姐扣篮，跳起来就是一个盖帽，跳起来就是一个……干扰球，还时不时替对手发个球……哈哈，兼职一个活宝。希望他能再专注一点，利用好自身优势，撑起勇士内线，哪怕就一会儿。韦斯特感觉没什么可说的，毕竟老将，比较沉稳，有经验，但跟一哥和利文斯顿比，还是差那么一点。好在防守还可以。克拉克这一个赛季挺亮眼，正式成为库里的替补，小伙子也挺争气。就目前的比赛来兰，进攻能力还是不错，而且三分出手快，估计没少跟库里学。垃圾时间阵容里，他就是第一得分点了。麦考还是嫩了一点，虽然凭借季前赛的出色发挥赢得了替补出场时间，但感觉太急躁，基本功不太扎实，估计还得再磨练一两年，再来担当大任。]]></content>
      <categories>
        <category>NBA观赛感受</category>
      </categories>
      <tags>
        <tag>warriors</tag>
        <tag>victory</tag>
        <tag>memory</tag>
      </tags>
  </entry>
</search>
